// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Comment struct {
	ID         string             `json:"id"`
	PostID     string             `json:"postID"`
	AuthorID   uuid.UUID          `json:"authorID"`
	Text       string             `json:"text"`
	CreatedAt  time.Time          `json:"createdAt"`
	Rating     int32              `json:"rating"`
	ParentID   *string            `json:"parentID,omitempty"`
	Children   *CommentConnection `json:"children"`
	ParentTree []*Comment         `json:"parentTree"`
}

type CommentConnection struct {
	Edges    []*CommentEdge `json:"edges"`
	PageInfo *PageInfo      `json:"pageInfo"`
}

type CommentEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Comment `json:"node"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   *string `json:"endCursor,omitempty"`
}

type Post struct {
	ID                 string             `json:"id"`
	AuthorID           uuid.UUID          `json:"authorID"`
	Title              string             `json:"title"`
	Content            string             `json:"content"`
	CreatedAt          time.Time          `json:"createdAt"`
	Rating             int32              `json:"rating"`
	CommentsCount      int32              `json:"commentsCount"`
	CommentsRestricted bool               `json:"commentsRestricted"`
	Comments           *CommentConnection `json:"comments"`
}

type PostConnection struct {
	Edges    []*PostEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node"`
}

type Query struct {
}

type Subscription struct {
}

type SortOrder string

const (
	SortOrderRating SortOrder = "RATING"
	SortOrderNew    SortOrder = "NEW"
	SortOrderOld    SortOrder = "OLD"
)

var AllSortOrder = []SortOrder{
	SortOrderRating,
	SortOrderNew,
	SortOrderOld,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderRating, SortOrderNew, SortOrderOld:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
