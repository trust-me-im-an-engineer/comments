package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	gqlmodel "github.com/trust-me-im-an-engineer/comments/graph/model"
	"github.com/trust-me-im-an-engineer/comments/internal/converter"
	"github.com/trust-me-im-an-engineer/comments/internal/validator"
)

var InternalServerErr = errors.New("internal server error")

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input gqlmodel.CreatePostInput) (*gqlmodel.Post, error) {
	if err := validator.ValidateCreatePostInput(input); err != nil {
		return nil, invalidInputWrap(err)
	}

	internalInput := converter.CreatePostInputToInternal(&input)

	post, err := r.postService.CreatePost(ctx, internalInput)
	if err != nil {
		return nil, InternalServerErr
	}

	gqlPost := &gqlmodel.Post{
		ID:                 strconv.Itoa(post.ID),
		AuthorID:           post.AuthorID,
		Title:              post.Title,
		Content:            post.Content,
		CreatedAt:          post.CreatedAt,
		Rating:             post.Rating,
		CommentsCount:      post.CommentsCount,
		CommentsRestricted: post.CommentsRestricted,
		Comments: &gqlmodel.CommentConnection{
			Edges: []*gqlmodel.CommentEdge{}, // empty slice to keep CommentEdge! promise
		},
	}

	return gqlPost, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input gqlmodel.UpdatePostInput) (*gqlmodel.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// SetCommentsRestricted is the resolver for the setCommentsRestricted field.
func (r *mutationResolver) SetCommentsRestricted(ctx context.Context, postID string, restricted bool) (*gqlmodel.Post, error) {
	panic(fmt.Errorf("not implemented: SetCommentsRestricted - setCommentsRestricted"))
}

// UpvotePost is the resolver for the upvotePost field.
func (r *mutationResolver) UpvotePost(ctx context.Context, input gqlmodel.VoteInput) (*gqlmodel.Post, error) {
	panic(fmt.Errorf("not implemented: UpvotePost - upvotePost"))
}

// DownvotePost is the resolver for the downvotePost field.
func (r *mutationResolver) DownvotePost(ctx context.Context, input gqlmodel.VoteInput) (*gqlmodel.Post, error) {
	panic(fmt.Errorf("not implemented: DownvotePost - downvotePost"))
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input gqlmodel.CreateCommentInput) (*gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, input gqlmodel.UpdateCommentInput) (*gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// UpvoteComment is the resolver for the upvoteComment field.
func (r *mutationResolver) UpvoteComment(ctx context.Context, input gqlmodel.VoteInput) (*gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: UpvoteComment - upvoteComment"))
}

// DownvoteComment is the resolver for the downvoteComment field.
func (r *mutationResolver) DownvoteComment(ctx context.Context, input gqlmodel.VoteInput) (*gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: DownvoteComment - downvoteComment"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*gqlmodel.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, sort *gqlmodel.SortOrder, limit *int32, cursor *string) (*gqlmodel.PostConnection, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID string) (<-chan *gqlmodel.Comment, error) {
	panic(fmt.Errorf("not implemented: NewComment - newComment"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// invalidInputWrap wraps error with "Invalid input: <error>"
func invalidInputWrap(err error) error {
	return fmt.Errorf("Invalid input: %w", err)
}
