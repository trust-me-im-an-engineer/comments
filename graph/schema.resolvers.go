package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"strconv"

	"github.com/trust-me-im-an-engineer/comments/graph/model"
	"github.com/trust-me-im-an-engineer/comments/internal/converter"
	"github.com/trust-me-im-an-engineer/comments/internal/storage"
	"github.com/trust-me-im-an-engineer/comments/internal/validator"
)

var InternalServerErr = errors.New("internal server error")

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment, sort *model.SortOrder, limit *int32, cursor *string, depth *int32) (*model.CommentConnection, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	if err := validator.ValidateCreatePostInput(input); err != nil {
		return nil, invalidInputWrap(err)
	}

	internalInput := converter.CreatePostInputToInternal(&input)

	post, err := r.postService.CreatePost(ctx, internalInput)
	if err != nil {
		slog.Error("post service failed to create post", "error", err)
		return nil, InternalServerErr
	}

	return converter.PostToGQL(post), nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input model.UpdatePostInput) (*model.Post, error) {
	if err := validator.ValidateUpdatePostInput(input); err != nil {
		return nil, invalidInputWrap(err)
	}

	internalInput := converter.UpdatePostToInternal(&input)

	post, err := r.postService.UpdatePost(ctx, internalInput)
	if errors.Is(err, storage.PostNotFound) {
		return nil, storage.PostNotFound
	}
	if err != nil {
		slog.Error("post service failed to update post", "error", err)
		return nil, InternalServerErr
	}

	return converter.PostToGQL(post), nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// SetCommentsRestricted is the resolver for the setCommentsRestricted field.
func (r *mutationResolver) SetCommentsRestricted(ctx context.Context, postID string, restricted bool) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: SetCommentsRestricted - setCommentsRestricted"))
}

// UpvotePost is the resolver for the upvotePost field.
func (r *mutationResolver) UpvotePost(ctx context.Context, input model.VoteInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpvotePost - upvotePost"))
}

// DownvotePost is the resolver for the downvotePost field.
func (r *mutationResolver) DownvotePost(ctx context.Context, input model.VoteInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: DownvotePost - downvotePost"))
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, input model.UpdateCommentInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// UpvoteComment is the resolver for the upvoteComment field.
func (r *mutationResolver) UpvoteComment(ctx context.Context, input model.VoteInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpvoteComment - upvoteComment"))
}

// DownvoteComment is the resolver for the downvoteComment field.
func (r *mutationResolver) DownvoteComment(ctx context.Context, input model.VoteInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: DownvoteComment - downvoteComment"))
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, sort *model.SortOrder, limit *int32, cursor *string, depth *int32) (*model.CommentConnection, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	internalID, err := strconv.Atoi(id)
	if err != nil {
		return nil, invalidInputWrap(fmt.Errorf("invalid post id: %w", err))
	}

	internalPost, err := r.postService.GetPost(ctx, internalID)
	if err != nil {
		slog.Error("post service failed to get post", "id", internalID, "error", err)
		return nil, InternalServerErr
	}

	return converter.PostToGQL(internalPost), nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, sort *model.SortOrder, limit *int32, cursor *string) (*model.PostConnection, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: NewComment - newComment"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

func invalidInputWrap(err error) error {
	return fmt.Errorf("Invalid input: %w", err)
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*

 */
